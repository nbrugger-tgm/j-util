package com.niton.util.config;// generated by tscfg 0.9.96 on Thu Dec 17 17:58:37 CET 2020
// source: util.cfg


public class UtilConfig {
  public final UtilConfig.Db db;
  public final UtilConfig.Logging logging;
  public static class Db {
    public final int auto_refresh;
    
    public Db(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this.auto_refresh = c.hasPathOrNull("auto-refresh") ? c.getInt("auto-refresh") : 60;
    }
  }
  
  public static class Logging {
    public final java.lang.String console;
    public final int exception_id_size;
    public final Logging.File file;
    public final Logging.Options options;
    public static class File {
      public final java.lang.String fatal;
      public final java.lang.String general;
      public final java.lang.String security;
      
      public File(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this.fatal = c.hasPathOrNull("fatal") ? c.getString("fatal") : "DEBUG";
        this.general = c.hasPathOrNull("general") ? c.getString("general") : "EXCEPTION";
        this.security = c.hasPathOrNull("security") ? c.getString("security") : "INFO";
      }
    }
    
    public static class Options {
      public final Options.Console console;
      public final Options.File2 file;
      public static class Console {
        public final boolean class_;
        public final boolean context;
        public final boolean date;
        public final boolean level;
        public final boolean module;
        public final boolean package_;
        public final boolean seconds;
        public final boolean time;
        
        public Console(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
          this.class_ = !c.hasPathOrNull("class") || c.getBoolean("class");
          this.context = !c.hasPathOrNull("context") || c.getBoolean("context");
          this.date = c.hasPathOrNull("date") && c.getBoolean("date");
          this.level = !c.hasPathOrNull("level") || c.getBoolean("level");
          this.module = c.hasPathOrNull("module") && c.getBoolean("module");
          this.package_ = c.hasPathOrNull("package") && c.getBoolean("package");
          this.seconds = !c.hasPathOrNull("seconds") || c.getBoolean("seconds");
          this.time = c.hasPathOrNull("time") && c.getBoolean("time");
        }
      }
      
      public static class File2 {
        public final boolean class_;
        public final boolean context;
        public final boolean date;
        public final boolean level;
        public final boolean module;
        public final boolean package_;
        public final boolean seconds;
        public final boolean time;
        
        public File2(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
          this.class_ = !c.hasPathOrNull("class") || c.getBoolean("class");
          this.context = c.hasPathOrNull("context") && c.getBoolean("context");
          this.date = !c.hasPathOrNull("date") || c.getBoolean("date");
          this.level = !c.hasPathOrNull("level") || c.getBoolean("level");
          this.module = !c.hasPathOrNull("module") || c.getBoolean("module");
          this.package_ = !c.hasPathOrNull("package") || c.getBoolean("package");
          this.seconds = !c.hasPathOrNull("seconds") || c.getBoolean("seconds");
          this.time = !c.hasPathOrNull("time") || c.getBoolean("time");
        }
      }
      
      public Options(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
        this.console = c.hasPathOrNull("console") ? new Options.Console(c.getConfig("console"), parentPath + "console.", $tsCfgValidator) : new Options.Console(com.typesafe.config.ConfigFactory.parseString("console{}"), parentPath + "console.", $tsCfgValidator);
        this.file = c.hasPathOrNull("file") ? new Options.File2(c.getConfig("file"), parentPath + "file.", $tsCfgValidator) : new Options.File2(com.typesafe.config.ConfigFactory.parseString("file{}"), parentPath + "file.", $tsCfgValidator);
      }
    }
    
    public Logging(com.typesafe.config.Config c, java.lang.String parentPath, $TsCfgValidator $tsCfgValidator) {
      this.console = c.hasPathOrNull("console") ? c.getString("console") : "DEBUG";
      this.exception_id_size = c.hasPathOrNull("exception-id-size") ? c.getInt("exception-id-size") : 4;
      this.file = c.hasPathOrNull("file") ? new Logging.File(c.getConfig("file"), parentPath + "file.", $tsCfgValidator) : new Logging.File(com.typesafe.config.ConfigFactory.parseString("file{}"), parentPath + "file.", $tsCfgValidator);
      this.options = c.hasPathOrNull("options") ? new Logging.Options(c.getConfig("options"), parentPath + "options.", $tsCfgValidator) : new Logging.Options(com.typesafe.config.ConfigFactory.parseString("options{}"), parentPath + "options.", $tsCfgValidator);
    }
  }
  
  public UtilConfig(com.typesafe.config.Config c) {
    final $TsCfgValidator $tsCfgValidator = new $TsCfgValidator();
    final java.lang.String parentPath = "";
    this.db = c.hasPathOrNull("db") ? new UtilConfig.Db(c.getConfig("db"), parentPath + "db.", $tsCfgValidator) : new UtilConfig.Db(com.typesafe.config.ConfigFactory.parseString("db{}"), parentPath + "db.", $tsCfgValidator);
    this.logging = c.hasPathOrNull("logging") ? new UtilConfig.Logging(c.getConfig("logging"), parentPath + "logging.", $tsCfgValidator) : new UtilConfig.Logging(com.typesafe.config.ConfigFactory.parseString("logging{}"), parentPath + "logging.", $tsCfgValidator);
    $tsCfgValidator.validate();
  }
  private static final class $TsCfgValidator  {
    private final java.util.List<java.lang.String> badPaths = new java.util.ArrayList<>();
    
    void addBadPath(java.lang.String path, com.typesafe.config.ConfigException e) {
      badPaths.add("'" + path + "': " + e.getClass().getName() + "(" + e.getMessage() + ")");
    }
    
    void validate() {
      if (!badPaths.isEmpty()) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder("Invalid configuration:");
        for (java.lang.String path : badPaths) {
          sb.append("\n    ").append(path);
        }
        throw new com.typesafe.config.ConfigException(sb.toString()) {};
      }
    }
  }
}
      
